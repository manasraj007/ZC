/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BookmarkService } from "../bookmark.service";
import { BookmarkCreateInput } from "./BookmarkCreateInput";
import { Bookmark } from "./Bookmark";
import { BookmarkFindManyArgs } from "./BookmarkFindManyArgs";
import { BookmarkWhereUniqueInput } from "./BookmarkWhereUniqueInput";
import { BookmarkUpdateInput } from "./BookmarkUpdateInput";

export class BookmarkControllerBase {
  constructor(protected readonly service: BookmarkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bookmark })
  async createBookmark(
    @common.Body() data: BookmarkCreateInput
  ): Promise<Bookmark> {
    return await this.service.createBookmark({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        questionId: true,
        timestamp: true,
        user: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bookmark] })
  @ApiNestedQuery(BookmarkFindManyArgs)
  async bookmarks(@common.Req() request: Request): Promise<Bookmark[]> {
    const args = plainToClass(BookmarkFindManyArgs, request.query);
    return this.service.bookmarks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        questionId: true,
        timestamp: true,
        user: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bookmark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bookmark(
    @common.Param() params: BookmarkWhereUniqueInput
  ): Promise<Bookmark | null> {
    const result = await this.service.bookmark({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        questionId: true,
        timestamp: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bookmark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBookmark(
    @common.Param() params: BookmarkWhereUniqueInput,
    @common.Body() data: BookmarkUpdateInput
  ): Promise<Bookmark | null> {
    try {
      return await this.service.updateBookmark({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          questionId: true,
          timestamp: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bookmark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBookmark(
    @common.Param() params: BookmarkWhereUniqueInput
  ): Promise<Bookmark | null> {
    try {
      return await this.service.deleteBookmark({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          questionId: true,
          timestamp: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
