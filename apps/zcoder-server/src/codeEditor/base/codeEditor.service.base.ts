/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CodeEditor as PrismaCodeEditor } from "@prisma/client";

export class CodeEditorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CodeEditorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.codeEditor.count(args);
  }

  async codeEditors(
    args: Prisma.CodeEditorFindManyArgs
  ): Promise<PrismaCodeEditor[]> {
    return this.prisma.codeEditor.findMany(args);
  }
  async codeEditor(
    args: Prisma.CodeEditorFindUniqueArgs
  ): Promise<PrismaCodeEditor | null> {
    return this.prisma.codeEditor.findUnique(args);
  }
  async createCodeEditor(
    args: Prisma.CodeEditorCreateArgs
  ): Promise<PrismaCodeEditor> {
    return this.prisma.codeEditor.create(args);
  }
  async updateCodeEditor(
    args: Prisma.CodeEditorUpdateArgs
  ): Promise<PrismaCodeEditor> {
    return this.prisma.codeEditor.update(args);
  }
  async deleteCodeEditor(
    args: Prisma.CodeEditorDeleteArgs
  ): Promise<PrismaCodeEditor> {
    return this.prisma.codeEditor.delete(args);
  }
}
