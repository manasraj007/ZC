/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CodingContest } from "./CodingContest";
import { CodingContestCountArgs } from "./CodingContestCountArgs";
import { CodingContestFindManyArgs } from "./CodingContestFindManyArgs";
import { CodingContestFindUniqueArgs } from "./CodingContestFindUniqueArgs";
import { CreateCodingContestArgs } from "./CreateCodingContestArgs";
import { UpdateCodingContestArgs } from "./UpdateCodingContestArgs";
import { DeleteCodingContestArgs } from "./DeleteCodingContestArgs";
import { CodingContestService } from "../codingContest.service";
@graphql.Resolver(() => CodingContest)
export class CodingContestResolverBase {
  constructor(protected readonly service: CodingContestService) {}

  async _codingContestsMeta(
    @graphql.Args() args: CodingContestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CodingContest])
  async codingContests(
    @graphql.Args() args: CodingContestFindManyArgs
  ): Promise<CodingContest[]> {
    return this.service.codingContests(args);
  }

  @graphql.Query(() => CodingContest, { nullable: true })
  async codingContest(
    @graphql.Args() args: CodingContestFindUniqueArgs
  ): Promise<CodingContest | null> {
    const result = await this.service.codingContest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CodingContest)
  async createCodingContest(
    @graphql.Args() args: CreateCodingContestArgs
  ): Promise<CodingContest> {
    return await this.service.createCodingContest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CodingContest)
  async updateCodingContest(
    @graphql.Args() args: UpdateCodingContestArgs
  ): Promise<CodingContest | null> {
    try {
      return await this.service.updateCodingContest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CodingContest)
  async deleteCodingContest(
    @graphql.Args() args: DeleteCodingContestArgs
  ): Promise<CodingContest | null> {
    try {
      return await this.service.deleteCodingContest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
