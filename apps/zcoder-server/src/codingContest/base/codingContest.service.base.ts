/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CodingContest as PrismaCodingContest } from "@prisma/client";

export class CodingContestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CodingContestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.codingContest.count(args);
  }

  async codingContests(
    args: Prisma.CodingContestFindManyArgs
  ): Promise<PrismaCodingContest[]> {
    return this.prisma.codingContest.findMany(args);
  }
  async codingContest(
    args: Prisma.CodingContestFindUniqueArgs
  ): Promise<PrismaCodingContest | null> {
    return this.prisma.codingContest.findUnique(args);
  }
  async createCodingContest(
    args: Prisma.CodingContestCreateArgs
  ): Promise<PrismaCodingContest> {
    return this.prisma.codingContest.create(args);
  }
  async updateCodingContest(
    args: Prisma.CodingContestUpdateArgs
  ): Promise<PrismaCodingContest> {
    return this.prisma.codingContest.update(args);
  }
  async deleteCodingContest(
    args: Prisma.CodingContestDeleteArgs
  ): Promise<PrismaCodingContest> {
    return this.prisma.codingContest.delete(args);
  }
}
