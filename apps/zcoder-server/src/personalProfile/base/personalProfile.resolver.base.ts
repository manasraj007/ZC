/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PersonalProfile } from "./PersonalProfile";
import { PersonalProfileCountArgs } from "./PersonalProfileCountArgs";
import { PersonalProfileFindManyArgs } from "./PersonalProfileFindManyArgs";
import { PersonalProfileFindUniqueArgs } from "./PersonalProfileFindUniqueArgs";
import { CreatePersonalProfileArgs } from "./CreatePersonalProfileArgs";
import { UpdatePersonalProfileArgs } from "./UpdatePersonalProfileArgs";
import { DeletePersonalProfileArgs } from "./DeletePersonalProfileArgs";
import { PersonalProfileService } from "../personalProfile.service";
@graphql.Resolver(() => PersonalProfile)
export class PersonalProfileResolverBase {
  constructor(protected readonly service: PersonalProfileService) {}

  async _personalProfilesMeta(
    @graphql.Args() args: PersonalProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PersonalProfile])
  async personalProfiles(
    @graphql.Args() args: PersonalProfileFindManyArgs
  ): Promise<PersonalProfile[]> {
    return this.service.personalProfiles(args);
  }

  @graphql.Query(() => PersonalProfile, { nullable: true })
  async personalProfile(
    @graphql.Args() args: PersonalProfileFindUniqueArgs
  ): Promise<PersonalProfile | null> {
    const result = await this.service.personalProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PersonalProfile)
  async createPersonalProfile(
    @graphql.Args() args: CreatePersonalProfileArgs
  ): Promise<PersonalProfile> {
    return await this.service.createPersonalProfile({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PersonalProfile)
  async updatePersonalProfile(
    @graphql.Args() args: UpdatePersonalProfileArgs
  ): Promise<PersonalProfile | null> {
    try {
      return await this.service.updatePersonalProfile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PersonalProfile)
  async deletePersonalProfile(
    @graphql.Args() args: DeletePersonalProfileArgs
  ): Promise<PersonalProfile | null> {
    try {
      return await this.service.deletePersonalProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
