/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Solution } from "./Solution";
import { SolutionCountArgs } from "./SolutionCountArgs";
import { SolutionFindManyArgs } from "./SolutionFindManyArgs";
import { SolutionFindUniqueArgs } from "./SolutionFindUniqueArgs";
import { CreateSolutionArgs } from "./CreateSolutionArgs";
import { UpdateSolutionArgs } from "./UpdateSolutionArgs";
import { DeleteSolutionArgs } from "./DeleteSolutionArgs";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { SolutionService } from "../solution.service";
@graphql.Resolver(() => Solution)
export class SolutionResolverBase {
  constructor(protected readonly service: SolutionService) {}

  async _solutionsMeta(
    @graphql.Args() args: SolutionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Solution])
  async solutions(
    @graphql.Args() args: SolutionFindManyArgs
  ): Promise<Solution[]> {
    return this.service.solutions(args);
  }

  @graphql.Query(() => Solution, { nullable: true })
  async solution(
    @graphql.Args() args: SolutionFindUniqueArgs
  ): Promise<Solution | null> {
    const result = await this.service.solution(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Solution)
  async createSolution(
    @graphql.Args() args: CreateSolutionArgs
  ): Promise<Solution> {
    return await this.service.createSolution({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Solution)
  async updateSolution(
    @graphql.Args() args: UpdateSolutionArgs
  ): Promise<Solution | null> {
    try {
      return await this.service.updateSolution({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Solution)
  async deleteSolution(
    @graphql.Args() args: DeleteSolutionArgs
  ): Promise<Solution | null> {
    try {
      return await this.service.deleteSolution(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Comment], { name: "comments" })
  async findComments(
    @graphql.Parent() parent: Solution,
    @graphql.Args() args: CommentFindManyArgs
  ): Promise<Comment[]> {
    const results = await this.service.findComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
